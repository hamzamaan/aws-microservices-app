{"id": "CVE-2021-3807", "package": "npm:ansi-regex", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.1.1", "fix_version": "4.1.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "#  Inefficient Regular Expression Complexity in chalk/ansi regex\nansi regex is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 4.1.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0691", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.9", "fix_version": "1.5.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Incorrect hostname / protocol due to unstripped leading control characters.\nLeading control characters in a URL are not stripped when passed into url parse. This can cause input URLs to be mistakenly be interpreted as a relative URL without a hostname and protocol, while the WHATWG URL parser will trim control characters and treat it as an absolute URL.\n\nIf url parse is used in security decisions involving the hostname / protocol, and the input URL is used in a client which uses the WHATWG URL parser, the decision may be incorrect.\n\nThis can also lead to a cross site scripting (XSS) vulnerability if url parse is used to check for the javascript: protocol in URLs. See following example:\n`````\nconst parse = require('url parse')\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\nurl = parse( \"  bjavascript:alert(1) \")\n\nconsole.log(url)\n\napp.get('/', (req, res) => {\n if (url.protocol !==  \"javascript: \") {res.send( \"<a href=  ' \" + url.href +  \"  '>CLICK ME!</a> \")}\n })\n\napp.listen(port, () => {\n console.log(`Example app listening on port ${port}`)\n })\n`````\nUpgrade to version 1.5.9 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0686", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.8", "fix_version": "1.5.9", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Authorization Bypass Through User Controlled Key in url parse\nurl parse prior to version 1.5.8 is vulnerable to Authorization Bypass Through User Controlled Key.\nUpgrade to version 1.5.8 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24772", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\" (https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28469", "package": "npm:glob-parent", "package_type": "npm", "package_usage": "optional", "version": "<5.1.2", "fix_version": "5.1.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular expression denial of service in glob parent\nThis affects the package glob parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.\nUpgrade to version 5.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-44906", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<1.2.6", "fix_version": "1.2.6", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Prototype Pollution in minimist\nMinimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69 95).\nUpgrade to version 1.2.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3749", "package": "npm:axios", "package_type": "npm", "package_usage": "optional", "version": "<0.21.2", "fix_version": "0.21.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Incorrect Comparison in axios\naxios is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 0.21.2 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24773", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Verification of Cryptographic Signature in `node forge`\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24771", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.3.0", "fix_version": "1.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Verification of Cryptographic Signature in node forge\n### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\" (https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at [example email address (mailto:security@digitalbazaar.com)\nUpgrade to version 1.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8203", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.20", "fix_version": "4.17.20", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in lodash\nVersions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user supplied. Being affected by this issue requires zipping objects based on user provided property arrays.\n\nThis vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.\nUpgrade to version 4.17.20 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23424", "package": "npm:ansi-html", "package_type": "npm", "package_usage": "optional", "version": "<0.0.8", "fix_version": "0.0.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in ansi html\nThis affects all versions of package ansi html. If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.\nUpgrade to version 0.0.8 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23382", "package": "npm:postcss", "package_type": "npm", "package_usage": "optional", "version": "<7.0.36", "fix_version": "7.0.36", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in postcss\nThe package postcss versions before 7.0.36 or between 8.0.0 and 8.2.13 are vulnerable to Regular Expression Denial of Service (ReDoS) via getAnnotationURL() and loadAnnotation() in lib/previous map.js. The vulnerable regexes are caused mainly by the sub pattern  / * s* sourceMappingURL=(.*).\nUpgrade to version 7.0.36 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0639", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.7", "fix_version": "1.5.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Incorrect returned href via an '@' sign but no user info and hostname\nA specially crafted URL with an '@' sign but empty user info and no hostname, when parsed with url parse, url parse will return the incorrect href. In particular,\n`````\nparse( \"http://@/127.0.0.1 \")\n`````\nWill return:\n`````\n{\n slashes: true,\n protocol: 'http:',\n hash: '',\n query: '',\n pathname: '/127.0.0.1',\n auth: '',\n host: '',\n port: '',\n hostname: '',\n password: '',\n username: '',\n origin: 'null',\n href: 'http:///127.0.0.1'\n }\n`````\nIf the 'hostname' or 'origin' attributes of the output from url parse are used in security decisions and the final 'href' attribute of the output is then used to make a request, the decision may be incorrect.\n\nUpgrade to version 1.5.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0512", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.6", "fix_version": "1.5.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Authorization bypass in url parse\nAuthorization Bypass Through User Controlled Key in NPM url parse prior to 1.5.6.\nUpgrade to version 1.5.6 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0536", "package": "npm:follow-redirects", "package_type": "npm", "package_usage": "optional", "version": "<1.14.8", "fix_version": "1.14.8", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Exposure of Sensitive Information to an Unauthorized Actor in follow redirects\nExposure of Sensitive Information to an Unauthorized Actor in NPM follow redirects prior to 1.14.8.\nUpgrade to version 1.14.8 or later\n            ", "related_urls": []}
{"id": "CVE-2020-24025", "package": "npm:node-sass", "package_type": "npm", "package_usage": "optional", "version": ">=2.0.0-<7.0.0", "fix_version": "7.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Certificate Validation in node sass\nCertificate validation in node sass 2.0.0 to 4.14.1 is disabled when requesting binaries even if the user is not specifying an alternative download path.\nUpgrade to version 7.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0235", "package": "npm:node-fetch", "package_type": "npm", "package_usage": "optional", "version": "<2.6.7", "fix_version": "2.6.7", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# node fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor\nnode fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor\nUpgrade to version 2.6.7 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0144", "package": "npm:shelljs", "package_type": "npm", "package_usage": "required", "version": "<0.8.5", "fix_version": "0.8.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Improper Privilege Management in shelljs\nshelljs is vulnerable to Improper Privilege Management\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "NPM-1067451", "package": "npm:shelljs", "package_type": "npm", "package_usage": "required", "version": "<0.8.5", "fix_version": "0.8.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Privilege Management in shelljs\n### Impact\nOutput from the synchronous version of `shell.exec()` may be visible to other users on the same system. You may be affected if you execute `shell.exec()` in multi user Mac, Linux, or WSL environments, or if you execute `shell.exec()` as the root user.\n\nOther shelljs functions (including the asynchronous version of `shell.exec()`) are not impacted.\n\n### Patches\nPatched in shelljs 0.8.5\n\n### Workarounds\nRecommended action is to upgrade to 0.8.5.\n\n### References\nhttps://huntr.dev/bounties/50996581 c08e 4eed a90e c0bac082679c/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Ask at https://github.com/shelljs/shelljs/issues/1058\n* Open an issue at https://github.com/shelljs/shelljs/issues/new\n\nUpgrade to version 0.8.5 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0122", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Open Redirect in node forge\nparseUrl functionality in node forge mishandles certain uses of backslash such as https:/ / /  and interprets the URI as a relative path. \nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2022-0155", "package": "npm:follow-redirects", "package_type": "npm", "package_usage": "optional", "version": "<1.14.7", "fix_version": "1.14.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Exposure of sensitive information in follow redirects\nfollow redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor\nUpgrade to version 1.14.7 or later\n            ", "related_urls": []}
{"id": "NPM-1067471", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node forge debug API.\n### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n  https://www.huntr.dev/bounties/1 npm node forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.\nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "NPM-1067472", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<0.10.0", "fix_version": "0.10.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in node forge util.setPath API\n### Impact\n`forge.util.setPath` had a potential prototype pollution issue if called with untrusted keys. This API was not used by forge itself.\n\n### Patches\nThe `forge.util.setPath` API and related functions were removed in 0.10.0.\n\n### Workarounds\nDon't call `forge.util.setPath` directly or indirectly with untrusted keys.\n\n### References\n  https://security.snyk.io/vuln/SNYK JS NODEFORGE 598677\n  https://cve.mitre.org/cgi bin/cvename.cgi?name=CVE 2020 7720\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.\nUpgrade to version 0.10.0 or later\n            ", "related_urls": []}
{"id": "NPM-1067473", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<1.0.0", "fix_version": "1.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# URL parsing in node forge could lead to undesired behavior.\n### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n  https://www.huntr.dev/bounties/41852c50 3c6d 4703 8c55 4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge (https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com\n\nUpgrade to version 1.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23490", "package": "npm:parse-link-header", "package_type": "npm", "package_usage": "optional", "version": "<2.0.0", "fix_version": "2.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Uncontrolled Resource Consumption in parse link header\nThe package parse link header before 2.0.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the checkHeader function.\nUpgrade to version 2.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-29059", "package": "npm:is-svg", "package_type": "npm", "package_usage": "optional", "version": ">=2.1.0-<4.3.0", "fix_version": "4.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# ReDOS in IS SVG\nA vulnerability was discovered in IS SVG version 4.3.1 and below where a Regular Expression Denial of Service (ReDOS) occurs if the application is provided and checks a crafted invalid SVG string.\nUpgrade to version 4.3.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3918", "package": "npm:json-schema", "package_type": "npm", "package_usage": "optional", "version": "<0.4.0", "fix_version": "0.4.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# json schema is vulnerable to Prototype Pollution\njson schema is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nUpgrade to version 0.4.0 or later\n            ", "related_urls": []}
{"id": "NPM-1067606", "package": "npm:lazysizes", "package_type": "npm", "package_usage": "required", "version": "<=5.2.1-rc0", "fix_version": "5.2.1-rc1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Cross Site Scripting in lazysizes\nVersions of `lazysizes` prior to 5.2.1 rc1 are vulnerable to Cross Site Scripting.  The `video embed` plugin fails to sanitize the following attributes: data vimeo, `data vimeoparams`, `data youtube` and `data ytparams`. This allows attackers to execute arbitrary JavaScript in a victim's browser if the attacker has control over the vulnerable attributes.\n\n\n## Recommendation\n\nUpgrade to version 5.2.1 rc1 or later.\nUpgrade to version 5.2.1 rc1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3803", "package": "npm:nth-check", "package_type": "npm", "package_usage": "optional", "version": "<2.0.1", "fix_version": "2.0.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Inefficient Regular Expression Complexity in nth check\nnth check is vulnerable to Inefficient Regular Expression Complexity\nUpgrade to version 2.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3805", "package": "npm:object-path", "package_type": "npm", "package_usage": "optional", "version": "<0.11.8", "fix_version": "0.11.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in object path\nobject path is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nUpgrade to version 0.11.8 or later\n            ", "related_urls": []}
{"id": "CVE-2019-11004", "package": "npm:materialize-css", "package_type": "npm", "package_usage": "optional", "version": "<=1.0.0", "fix_version": null, "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Low severity vulnerability that affects materialize css\nIn Materialize through 1.0.0, XSS is possible via the Toast feature.\nNone\n            ", "related_urls": []}
{"id": "CVE-2021-37713", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some path`.  If the drive letter does not match the extraction target, for example `D: extraction dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37712", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.18", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi code point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, ` ` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n\nUpgrade to version 4.4.18 or later\n            ", "related_urls": []}
{"id": "CVE-2021-37701", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": "<4.4.16", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both ` ` and `/` characters as path separators, however ` ` is a valid filename character on posix systems.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nAdditionally, a similar confusion could arise on case insensitive filesystems.  If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. \n\nThese issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.\n\nThe v3 branch of `node tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n4.4.16 || 5.0.8 || 6.1.7\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n### Fix\n\nThe problem is addressed in the following ways:\n\n1. All paths are normalized to use `/` as a path separator, replacing ` ` with `/` on Windows systems, and leaving ` ` intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.\n2. Directory cache pruning is performed case insensitively.  This _may_ result in undue cache misses on case sensitive file systems, but the performance impact is negligible.\n\n#### Caveat\n\nNote that this means that the `entry` objects exposed in various parts of tar's API will now always use `/` as a path separator, even on Windows systems.  This is not expected to cause problems, as `/` is a valid path separator on Windows systems, but _may_ result in issues if `entry.path` is compared against a path string coming from some other API such as `fs.realpath()` or `path.resolve()`.\n\nUsers are encouraged to always normalize paths using a well tested method such as `path.resolve()` before comparing paths to one another.\nUpgrade to version 4.4.16 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23434", "package": "npm:object-path", "package_type": "npm", "package_usage": "optional", "version": "<0.11.6", "fix_version": "0.11.8", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in object path\nThis affects the package object path before 0.11.6. A type confusion vulnerability can lead to a bypass of CVE 2020 15256 when the path components used in the path parameter are arrays. In particular, the condition currentPath === '__proto__' returns false if currentPath is ['__proto__' . This is because the === operator returns always false when the type of the operands is different.\nUpgrade to version 0.11.6 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23343", "package": "npm:path-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.0.7", "fix_version": "1.0.7", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in path parse\nAffected versions of npm package `path parse` are vulnerable to Regular Expression Denial of Service (ReDoS) via splitDeviceRe, splitTailRe, and splitPathRe regular expressions. ReDoS exhibits polynomial worst case time complexity.\nUpgrade to version 1.0.7 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32804", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.4.14", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite due to insufficient absolute path sanitization\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. \n\nThis logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. \n\n### Patches\n\n3.2.2 || 4.4.14 || 5.0.6 || 6.1.1\n\nNOTE: an adjacent issue [CVE 2021 32803 (https://github.com/npm/node tar/security/advisories/GHSA r628 mhmh qjhw) affects this release level. Please ensure you update to the latest patch levels that address CVE 2021 32803 as well if this adjacent issue affects your `node tar` use case.\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths.\n\n```js\nconst path = require('path')\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  // either add this function...\n  onentry: (entry) => {\n    if (path.isAbsolute(entry.path)) {\n      entry.path = sanitizeAbsolutePathSomehow(entry.path)\n      entry.absolute = path.resolve(entry.path)\n    }\n  },\n\n  // or this one\n  filter: (file, entry) => {\n    if (path.isAbsolute(entry.path)) {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 4.4.14 or later\n            ", "related_urls": []}
{"id": "CVE-2021-32803", "package": "npm:tar", "package_type": "npm", "package_usage": "optional", "version": ">=4.0.0-<4.4.15", "fix_version": "4.4.18", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning\n### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\n`node tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node tar` checks for symlinks occur.\n\nBy first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThis issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.\n\n### Patches\n\n3.2.3 || 4.4.15 || 5.0.7 || 6.1.2\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom `filter` method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.\nUpgrade to version 4.4.15 or later\n            ", "related_urls": []}
{"id": "CVE-2021-3664", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.2", "fix_version": "1.5.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Open redirect in url parse\n# Overview\n\nAffected versions of npm `url parse` are vulnerable to URL Redirection to Untrusted Site.\n\n# Impact\n\nDepending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.\nUpgrade to version 1.5.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-36049", "package": "npm:socket.io-parser", "package_type": "npm", "package_usage": "optional", "version": "<3.3.2", "fix_version": "3.3.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Resource exhaustion in socket.io parser\nThe `socket.io parser` npm package before versions 3.3.2 and 3.4.1 allows attackers to cause a denial of service (memory consumption) via a large packet because a concatenation approach is used.\nUpgrade to version 3.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-29060", "package": "npm:color-string", "package_type": "npm", "package_usage": "optional", "version": "<1.5.5", "fix_version": "1.5.5", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDOS)\nIn the npm package `color string`, there is a  ReDos (Regular Expression Denial of Service) vulnerability regarding an exponential time complexity for\nlinearly increasing input lengths for `hwb()` color strings.\n\nStrings reaching more than 5000 characters would see several\nmilliseconds of processing time; strings reaching more than\n50,000 characters began seeing 1500ms (1.5s) of processing time.\n\nThe cause was due to a the regular expression that parses\nhwb() strings   specifically, the hue value   where\nthe integer portion of the hue value used a 0 or more quantifier\nshortly thereafter followed by a 1 or more quantifier.\n\nThis caused excessive backtracking and a cartesian scan,\nresulting in exponential time complexity given a linear\nincrease in input length.\nUpgrade to version 1.5.5 or later\n            ", "related_urls": []}
{"id": "CVE-2021-33623", "package": "npm:trim-newlines", "package_type": "npm", "package_usage": "optional", "version": "<3.0.1", "fix_version": "3.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in trim newlines\nThe trim newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial of service (ReDoS) for the .end() method.\nUpgrade to version 3.0.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23386", "package": "npm:dns-packet", "package_type": "npm", "package_usage": "optional", "version": "<1.3.2", "fix_version": "1.3.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Potential memory exposure in dns packet\nThis affects the package dns packet before versions 1.3.2 and 5.2.2. It creates buffers with allocUnsafe and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.\nUpgrade to version 1.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7642", "package": "npm:lazysizes", "package_type": "npm", "package_usage": "required", "version": "<=5.2.0", "fix_version": "5.2.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Cross site scripting in lazysizes\nlazysizes through 5.2.0 allows execution of malicious JavaScript. The following attributes are not sanitized by the video embed plugin: data vimeo, data vimeoparams, data youtube and data ytparams which can be abused to inject malicious JavaScript.\nUpgrade to version 5.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-31597", "package": "npm:xmlhttprequest-ssl", "package_type": "npm", "package_usage": "optional", "version": "<1.6.1", "fix_version": "1.6.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Improper Certificate Validation in xmlhttprequest ssl\nThe xmlhttprequest ssl package before 1.6.1 for Node.js disables SSL certificate validation by default, because rejectUnauthorized (when the property exists but is undefined) is considered to be false within the https.request function of Node.js. In other words, no certificate is ever rejected.\nUpgrade to version 1.6.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15366", "package": "npm:ajv", "package_type": "npm", "package_usage": "optional", "version": "<6.12.3", "fix_version": "6.12.3", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in Ajv\nAn issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\nUpgrade to version 6.12.3 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23362", "package": "npm:hosted-git-info", "package_type": "npm", "package_usage": "optional", "version": "<2.8.9", "fix_version": "2.8.9", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service in hosted git info\nThe npm package `hosted git info` before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst case time complexity\nUpgrade to version 2.8.9 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28502", "package": "npm:xmlhttprequest-ssl", "package_type": "npm", "package_usage": "optional", "version": "<1.6.2", "fix_version": "1.6.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Injection\nThis affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run.\nUpgrade to version 1.6.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7733", "package": "npm:ua-parser-js", "package_type": "npm", "package_usage": "optional", "version": "<0.7.22", "fix_version": "0.7.24", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in ua parser js\nThe package ua parser js before 0.7.22 are vulnerable to Regular Expression Denial of Service (ReDoS) via the regex for Redmi Phones and Mi Pad Tablets UA.\nUpgrade to version 0.7.22 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7746", "package": "npm:chart.js", "package_type": "npm", "package_usage": "optional", "version": "<2.9.4", "fix_version": "2.9.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype pollution in chart.js\nThis affects the package chart.js before 2.9.4. The options parameter is not properly sanitized when it is processed. When the options are processed, the existing options (or the defaults options) are deeply merged with provided options. However, during this operation, the keys of the object being set are not checked, leading to a prototype pollution.\nUpgrade to version 2.9.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7693", "package": "npm:sockjs", "package_type": "npm", "package_usage": "optional", "version": "<0.3.20", "fix_version": "0.3.20", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Improper Input Validation in SocksJS Node\nIncorrect handling of Upgrade header with the value websocket leads in crashing of containers hosting sockjs apps. This affects the package sockjs before 0.3.20.\nUpgrade to version 0.3.20 or later\n            ", "related_urls": []}
{"id": "CVE-2021-27290", "package": "npm:ssri", "package_type": "npm", "package_usage": "optional", "version": ">=5.2.2-<6.0.2", "fix_version": "6.0.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nnpm `ssri` 5.2.2 6.0.1 and 7.0.0 8.0.0, processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option.\nUpgrade to version 6.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7793", "package": "npm:ua-parser-js", "package_type": "npm", "package_usage": "optional", "version": "<0.7.23", "fix_version": "0.7.24", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS) in ua parser js\nThe package ua parser js before 0.7.23 are vulnerable to Regular Expression Denial of Service (ReDoS) in multiple regexes (see linked commit for more info).\nUpgrade to version 0.7.23 or later\n            ", "related_urls": []}
{"id": "CVE-2020-36048", "package": "npm:engine.io", "package_type": "npm", "package_usage": "optional", "version": "<4.0.0", "fix_version": "4.0.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Resource exhaustion in engine.io \nEngine.IO before 4.0.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.\nUpgrade to version 4.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23337", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Command Injection in lodash\n`lodash` versions prior to 4.17.21 are vulnerable to Command Injection via the template function.\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2021-23358", "package": "npm:underscore", "package_type": "npm", "package_usage": "optional", "version": ">=1.3.2-<1.12.1", "fix_version": "1.12.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Arbitrary Code Execution in underscore\nThe package `underscore` from 1.13.0 0 and before 1.13.0 2, from 1.3.2 and before 1.12.1 are vulnerable to Arbitrary Code Execution via the template function, particularly when a variable property is passed as an argument as it is not sanitized.\nUpgrade to version 1.12.1 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1109", "package": "npm:braces", "package_type": "npm", "package_usage": "optional", "version": "<2.3.1", "fix_version": "2.3.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in braces\nA vulnerability was found in Braces versions prior to 2.3.1. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\nUpgrade to version 2.3.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-27515", "package": "npm:url-parse", "package_type": "npm", "package_usage": "optional", "version": "<1.5.0", "fix_version": "1.5.9", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Path traversal in url parse\nurl parse before 1.5.0 mishandles certain uses of backslash such as http: / and interprets the URI as a relative path.\nUpgrade to version 1.5.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28500", "package": "npm:lodash", "package_type": "npm", "package_usage": "optional", "version": "<4.17.21", "fix_version": "4.17.21", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Regular Expression Denial of Service (ReDoS) in lodash\nAll versions of package lodash prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions. Steps to reproduce (provided by reporter Liyuan Chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" for (var i = 0; i < n; i++) { ret += \" \" } return ret + \"1\"; } var s = build_blank(50000) var time0 = Date.now(); lo.trim(s) var time_cost0 = Date.now()   time0; console.log(\"time_cost0: \" + time_cost0) var time1 = Date.now(); lo.toNumber(s) var time_cost1 = Date.now()   time1; console.log(\"time_cost1: \" + time_cost1) var time2 = Date.now(); lo.trimEnd(s) var time_cost2 = Date.now()   time2; console.log(\"time_cost2: \" + time_cost2)\nUpgrade to version 4.17.21 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28499", "package": "npm:merge", "package_type": "npm", "package_usage": "optional", "version": "<2.1.1", "fix_version": "2.1.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in merge\nAll versions of package merge <2.1.1 are vulnerable to Prototype Pollution via _recursiveMerge .\nUpgrade to version 2.1.1 or later\n            ", "related_urls": []}
{"id": "CVE-2021-28092", "package": "npm:is-svg", "package_type": "npm", "package_usage": "optional", "version": ">=2.1.0-<4.2.2", "fix_version": "4.3.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service (ReDoS)\nThe is svg package 2.1.0 through 4.2.1 for Node.js uses a regular expression that is vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, is svg will get stuck processing the input for a very long time.\nUpgrade to version 4.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7774", "package": "npm:y18n", "package_type": "npm", "package_usage": "optional", "version": "<3.2.2", "fix_version": "4.0.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution\n### Overview\n\nThe npm package `y18n` before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. \n\n### POC\n\n```\nconst y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n```\n\n### Recommendation\n\nUpgrade to version 3.2.2, 4.0.1, 5.0.5 or later.\nUpgrade to version 3.2.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28498", "package": "npm:elliptic", "package_type": "npm", "package_usage": "optional", "version": "<6.5.4", "fix_version": "6.5.4", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Use of a Broken or Risky Cryptographic Algorithm\nThe npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.\nUpgrade to version 6.5.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28481", "package": "npm:socket.io", "package_type": "npm", "package_usage": "optional", "version": "<2.4.0", "fix_version": "2.4.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Insecure defaults due to CORS misconfiguration in socket.io\nThe package socket.io before 2.4.0 are vulnerable to Insecure Defaults due to CORS Misconfiguration. All domains are whitelisted by default.\nUpgrade to version 2.4.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-28168", "package": "npm:axios", "package_type": "npm", "package_usage": "optional", "version": "<0.21.1", "fix_version": "0.21.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Server Side Request Forgery in Axios\nAxios NPM package 0.21.0 contains a Server Side Request Forgery (SSRF) vulnerability where an attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\nUpgrade to version 0.21.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7788", "package": "npm:ini", "package_type": "npm", "package_usage": "optional", "version": "<1.3.6", "fix_version": "1.3.6", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution\n### Overview\nThe `ini` npm package before version 1.3.6 has a Prototype Pollution vulnerability.\n\nIf an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\n\n### Patches\n\nThis has been patched in 1.3.6\n\n### Steps to reproduce\n\npayload.ini\n```\n[__proto__ \npolluted = \"polluted\"\n```\n\npoc.js:\n```\nvar fs = require('fs')\nvar ini = require('ini')\n\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf 8'))\nconsole.log(parsed)\nconsole.log(parsed.__proto__)\nconsole.log(polluted)\n```\n\n```\n> node poc.js\n{}\n{ polluted: 'polluted' }\n{ polluted: 'polluted' }\npolluted\n```\nUpgrade to version 1.3.6 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7608", "package": "npm:yargs-parser", "package_type": "npm", "package_usage": "optional", "version": ">=6.0.0-<13.1.2", "fix_version": "13.1.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in yargs parser\nAffected versions of `yargs parser` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  foo.__proto__.bar baz'` adds a `bar` property with value `baz` to all objects. This is only exploitable if attackers have control over the arguments being passed to `yargs parser`.\n\n\n\n## Recommendation\n\nUpgrade to versions 13.1.2, 15.0.1, 18.1.1 or later.\nUpgrade to version 13.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15256", "package": "npm:object-path", "package_type": "npm", "package_usage": "optional", "version": "<0.11.5", "fix_version": "0.11.8", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype pollution in object path\n### Impact\nA prototype pollution vulnerability has been found in `object path` <= 0.11.4 affecting the `set()` method. The vulnerability is limited to the `includeInheritedProps` mode (if version >= 0.11.0 is used), which has to be explicitly enabled by creating a new instance of `object path` and setting the option `includeInheritedProps: true`, or by using the default `withInheritedProps` instance. The default operating mode is not affected by the vulnerability if version >= 0.11.0 is used. Any usage of `set()` in versions < 0.11.0 is vulnerable.\n \n### Patches\nUpgrade to version >= 0.11.5\n\n### Workarounds\nDon't use the `includeInheritedProps: true` options or the `withInheritedProps` instance if using a version >= 0.11.0.\n\n### References\n[Read more about the prototype pollution vulnerability (https://codeburst.io/what is prototype pollution 49482fc4b638)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [object path (https://github.com/mariocasciaro/object path)\nUpgrade to version 0.11.5 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7720", "package": "npm:node-forge", "package_type": "npm", "package_usage": "optional", "version": "<0.10.0", "fix_version": "0.10.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in node forge\nThe package node forge before 0.10.0 is vulnerable to Prototype Pollution via the util.setPath function. Note: Version 0.10.0 is a breaking change removing the vulnerable functions.\nUpgrade to version 0.10.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-15168", "package": "npm:node-fetch", "package_type": "npm", "package_usage": "optional", "version": "<2.6.1", "fix_version": "2.6.7", "severity": "LOW", "cvss_score": "2.0", "short_description": "# The `size` option isn't honored after following a redirect in node fetch\n### Impact\nNode Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a `FetchError` would never get thrown and the process would end without failure.\n\nFor most people, this fix will have a little or no impact. However, if you are relying on node fetch to gate files above a size, the impact could be significant, for example: If you don't double check the size of the data after `fetch()` has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.\n\n### Patches\nWe released patched versions for both stable and beta channels:\n\n  For `v2`: 2.6.1\n  For `v3`: 3.0.0 beta.9\n\n### Workarounds\nNone, it is strongly recommended to update as soon as possible.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [node fetch (https://github.com/node fetch/node fetch/issues/new?assignees=&labels=question&template=support or usage.md&title=Question%3A+)\n* Contact one of the core maintainers.\nUpgrade to version 2.6.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-8244", "package": "npm:bl", "package_type": "npm", "package_usage": "optional", "version": "<1.2.3", "fix_version": "1.2.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Remote Memory Exposure in bl\nA buffer over read vulnerability exists in bl <4.0.3, <3.0.1, <2.2.1, and <1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.\nUpgrade to version 1.2.3 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16113", "package": "npm:parsejson", "package_type": "npm", "package_usage": "optional", "version": "<=0.0.3", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in parsejson\nAffected versions of `parsejson` are vulnerable to a regular expression denial of service when parsing untrusted user input.\n\n\n## Recommendation\n\nThe `parsejson` package has not been functionally updated since it was initially released.\n\nAdditionally, it provides functionality which is natively included in Node.js, and therefore the native `JSON.parse()` should be used, for both performance and security reasons.\nNone\n            ", "related_urls": []}
{"id": "NPM-1068377", "package": "npm:http-proxy", "package_type": "npm", "package_usage": "optional", "version": "<1.18.1", "fix_version": "1.18.1", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in http proxy\nVersions of `http proxy` prior to 1.18.1 are vulnerable to Denial of Service. An HTTP request with a long body triggers an `ERR_HTTP_HEADERS_SENT` unhandled exception that crashes the proxy server. This is only possible when the proxy server sets headers in the proxy request using the `proxyReq.setHeader` function.   \n\nFor a proxy server running on `http://localhost:3000`, the following curl request triggers the unhandled exception:  \n```curl  XPOST http://localhost:3000  d \"$(python  c 'print(\"x\"*1025)')\"```\n\n\n## Recommendation\n\nUpgrade to version 1.18.1 or later\nUpgrade to version 1.18.1 or later\n            ", "related_urls": []}
{"id": "NPM-1068848", "package": "npm:wangeditor", "package_type": "npm", "package_usage": "required", "version": ">=0", "fix_version": null, "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Cross Site Scripting in wangeditor\nAll versions of `wangeditor` are vulnerable to Cross Site Scripting. The package fails to properly encode output, allowing arbitrary JavaScript to be inserted in links and executed by browsers.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative module until a fix is made available.\nNone\n            ", "related_urls": []}
{"id": "CVE-2019-11002", "package": "npm:materialize-css", "package_type": "npm", "package_usage": "optional", "version": "<=1.0.0", "fix_version": null, "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting in materialize css\nAll versions of `materialize css` are vulnerable to Cross Site Scripting. The `tooltip` component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative module until a fix is made available.\nNone\n            ", "related_urls": []}
{"id": "CVE-2019-11003", "package": "npm:materialize-css", "package_type": "npm", "package_usage": "optional", "version": "<=1.0.0", "fix_version": null, "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting in materialize css\nAll versions of `materialize css` are vulnerable to Cross Site Scripting. The `autocomplete` component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.\n\n\n## Recommendation\n\nNo fix is currently available. Consider using an alternative module until a fix is made available.\nNone\n            ", "related_urls": []}
{"id": "CVE-2017-16024", "package": "npm:sync-exec", "package_type": "npm", "package_usage": "optional", "version": "<=0.6.2", "fix_version": null, "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Tmp files readable by other users in sync exec\nAffected versions of `sync exec` use files located in `/tmp/` to buffer command results before returning values. As `/tmp/` is almost always set with world readable permissions, this may allow low privilege users on the system to read the results of commands run via `sync exec` under a higher privilege user.\n\n\n## Recommendation\n\nThere is currently no direct patch for `sync exec`, as the `child_process.execSync` function provided in Node.js v0.12.0 and later provides the same functionality natively. \n\nThe best mitigation currently is to update to Node.js v0.12.0 or later, and migrate all uses of `sync exec` to `child_process.execSync()`.\nNone\n            ", "related_urls": []}
{"id": "CVE-2013-7370", "package": "npm:connect", "package_type": "npm", "package_usage": "optional", "version": "<=2.8.0", "fix_version": "2.8.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# methodOverride Middleware Reflected Cross Site Scripting in connect\nConnect is a stack of middleware that is executed in order in each request.\n\nThe \"methodOverride\" middleware allows the http post to override the method of the request with the value of the \"_method\" post key or with the header \"x http method override\".\n\nBecause the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the \"Cannot `[method ` `[url `\" content. The method was not properly encoded for output in the browser.\n\n\n###Example:\n```\n~ curl \"localhost:3000\"  d \"_method=<script src=http://nodesecurity.io/xss.js></script>\"\nCannot <SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS></SCRIPT> /\n```\n\n## Recommendation\n\nUpdate to the newest version of Connect or disable methodOverride. It is not possible to avoid the vulnerability if you have enabled this middleware in the top of your stack.\nUpgrade to version 2.8.1 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7660", "package": "npm:serialize-javascript", "package_type": "npm", "package_usage": "optional", "version": "<3.1.0", "fix_version": "3.1.0", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Insecure serialization leading to RCE in serialize javascript\nserialize javascript prior to 3.1.0 allows remote attackers to inject arbitrary code via the function \"deleteFunctions\" within \"index.js\". \n\nAn object such as `{\"foo\": /1\"/, \"bar\": \"a \"@__R <UID> 0__@\"}` was serialized as `{\"foo\": /1\"/, \"bar\": \"a /1\"/}`, which allows an attacker to escape the `bar` key. This requires the attacker to control the values of both `foo` and `bar` and guess the value of `<UID>`. The UID has a keyspace of approximately 4 billion making it a realistic network attack.\nUpgrade to version 3.1.0 or later\n            ", "related_urls": []}
{"id": "CVE-2020-13822", "package": "npm:elliptic", "package_type": "npm", "package_usage": "optional", "version": "<6.5.3", "fix_version": "6.5.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Signature Malleabillity in elliptic\nThe Elliptic package before version 6.5.3 for Node.js allows ECDSA signature malleability via variations in encoding, leading ' 0' bytes, or integer overflows. This could conceivably have a security relevant impact if an application relied on a single canonical signature.\nUpgrade to version 6.5.3 or later\n            ", "related_urls": []}
{"id": "CVE-2019-20149", "package": "npm:kind-of", "package_type": "npm", "package_usage": "optional", "version": ">=6.0.0-<6.0.3", "fix_version": "6.0.3", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Validation Bypass in kind of\nVersions of `kind of` 6.x prior to 6.0.3 are vulnerable to a Validation Bypass. A maliciously crafted object can alter the result of the type check, allowing attackers to bypass the type checking validation. \n\n\n## Recommendation\n\nUpgrade to versions 6.0.3 or later.\nUpgrade to version 6.0.3 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7662", "package": "npm:websocket-extensions", "package_type": "npm", "package_usage": "optional", "version": "<0.1.4", "fix_version": "0.1.4", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in websocket extensions (NPM package)\n### Impact\n\nThe ReDoS flaw allows an attacker to exhaust the server's capacity to process\nincoming requests by sending a WebSocket handshake request containing a header\nof the following form:\n\n    Sec WebSocket Extensions: a; b=\" c c c c c c c c c c ...\n\nThat is, a header containing an unclosed string parameter value whose content is\na repeating two byte sequence of a backslash and some other character. The\nparser takes exponential time to reject this header as invalid, and this will\nblock the processing of any other work on the same thread. Thus if you are\nrunning a single threaded server, such a request can render your service\ncompletely unavailable.\n\n### Patches\n\nUsers should upgrade to version 0.1.4.\n\n### Workarounds\n\nThere are no known work arounds other than disabling any public facing\nWebSocket functionality you are operating.\n\n### References\n\n  https://blog.jcoglan.com/2020/06/02/redos vulnerability in websocket extensions/\nUpgrade to version 0.1.4 or later\n            ", "related_urls": []}
{"id": "CVE-2020-7598", "package": "npm:minimist", "package_type": "npm", "package_usage": "optional", "version": "<0.2.1", "fix_version": "0.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in minimist\nAffected versions of `minimist` are vulnerable to prototype pollution. Arguments are not properly sanitized, allowing an attacker to modify the prototype of `Object`, causing the addition or modification of an existing property that will exist on all objects.  \nParsing the argument `  __proto__.y=Polluted` adds a `y` property with value `Polluted` to all objects. The argument `  __proto__=Polluted` raises and uncaught error and crashes the application.  \nThis is exploitable if attackers have control over the arguments being passed to `minimist`.\n\n\n\n## Recommendation\n\nUpgrade to versions 0.2.1, 1.2.3 or later.\nUpgrade to version 0.2.1 or later\n            ", "related_urls": []}
{"id": "NPM-1069474", "package": "npm:ws", "package_type": "npm", "package_usage": "optional", "version": ">=0.2.6-<1.1.5", "fix_version": "1.1.5", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Denial of Service in ws\nAffected versions of `ws` can crash when a specially crafted `Sec WebSocket Extensions` header containing `Object.prototype` property names as extension or parameter names is sent.\n\n## Proof of concept\n\n```\nconst WebSocket = require('ws');\nconst net = require('net');\n\nconst wss = new WebSocket.Server({ port: 3000 }, function () {\n  const payload = 'constructor';  // or ',;constructor'\n\n  const request = [\n    'GET / HTTP/1.1',\n    'Connection: Upgrade',\n    'Sec WebSocket Key: test',\n    'Sec WebSocket Version: 8',\n    `Sec WebSocket Extensions: ${payload}`,\n    'Upgrade: websocket',\n    ' r n'\n   .join(' r n');\n\n  const socket = net.connect(3000, function () {\n    socket.resume();\n    socket.write(request);\n  });\n});\n```\n\n\n## Recommendation\n\nUpdate to version 3.3.1 or later.\nUpgrade to version 1.1.5 or later\n            ", "related_urls": []}
{"id": "CVE-2018-21270", "package": "npm:stringstream", "package_type": "npm", "package_usage": "optional", "version": "<0.0.6", "fix_version": "0.0.6", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Out of bounds Read in stringstream\nAll versions of `stringstream` are vulnerable to out of bounds read as it allocates uninitialized Buffers when number is passed in input stream on Node.js 4.x and below.\n\n\n## Recommendation\n\nNo fix is currently available for this vulnerability. It is our recommendation to not install or use this module if user input is being passed in to `stringstream`.\nUpgrade to version 0.0.6 or later\n            ", "related_urls": []}
{"id": "NPM-1069589", "package": "npm:braces", "package_type": "npm", "package_usage": "optional", "version": "<2.3.1", "fix_version": "2.3.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Regular Expression Denial of Service in braces\nVersions of `braces` prior to 2.3.1 are vulnerable to Regular Expression Denial of Service (ReDoS). Untrusted input may cause catastrophic backtracking while matching regular expressions. This can cause the application to be unresponsive leading to Denial of Service.\n\n\n## Recommendation\n\nUpgrade to version 2.3.1 or higher.\nUpgrade to version 2.3.1 or later\n            ", "related_urls": []}
{"id": "NPM-1069621", "package": "npm:tunnel-agent", "package_type": "npm", "package_usage": "optional", "version": "<0.6.0", "fix_version": "0.6.0", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Memory Exposure in tunnel agent\nVersions of `tunnel agent` before 0.6.0 are vulnerable to memory exposure.\n\nThis is exploitable if user supplied input is provided to the auth value and is a number.\n\nProof of concept:\n```js\nrequire('request')({\n  method: 'GET',\n  uri: 'http://www.example.com',\n  tunnel: true,\n  proxy:{\n    protocol: 'http:',\n    host:'127.0.0.1',\n    port:8080,\n    auth:USERSUPPLIEDINPUT // number\n  }\n});\n```\n\n\n## Recommendation\n\nUpdate to version 0.6.0 or later.\nUpgrade to version 0.6.0 or later\n            ", "related_urls": []}
{"id": "NPM-1069641", "package": "npm:webpack-bundle-analyzer", "package_type": "npm", "package_usage": "optional", "version": "<3.3.2", "fix_version": "3.3.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Cross Site Scripting in webpack bundle analyzer\nVersions of `webpack bundle analyzer` prior to 3.3.2 are vulnerable to Cross Site Scripting. The package uses `JSON.stringify()` without properly escaping input which may lead to Cross Site Scripting.\n\n\n## Recommendation\n\nUpgrade to version 3.3.2 or later.\nUpgrade to version 3.3.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16492", "package": "npm:extend", "package_type": "npm", "package_usage": "optional", "version": ">=3.0.0-<3.0.2", "fix_version": "3.0.2", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in extend\nVersions of `extend` prior to 3.0.2 (for 3.x) and 2.0.2 (for 2.x) are vulnerable to Prototype Pollution. The `extend()` function allows attackers to modify the prototype of Object causing the addition or modification of an existing property that will exist on all objects.\n\n\n\n\n## Recommendation\n\nIf you're using `extend` 3.x upgrade to 3.0.2 or later.\nIf you're using `extend` 2.x upgrade to 2.0.2 or later.\nUpgrade to version 3.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-16469", "package": "npm:merge", "package_type": "npm", "package_usage": "optional", "version": "<1.2.1", "fix_version": "2.1.1", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Prototype Pollution in merge\nVersions of `merge` before 1.2.1 are vulnerable to prototype pollution. The `merge.recursive` function can be tricked into adding or modifying properties of the Object prototype.\n\n\n## Recommendation\n\nUpdate to version 1.2.1 or later.\nUpgrade to version 1.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2016-10540", "package": "npm:minimatch", "package_type": "npm", "package_usage": "optional", "version": "<3.0.2", "fix_version": "3.0.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in minimatch\nAffected versions of `minimatch` are vulnerable to regular expression denial of service attacks when user input is passed into the `pattern` argument of `minimatch(path, pattern)`.\n\n\n## Proof of Concept\n```\nvar minimatch = require(\u201cminimatch\u201d);\n\n// utility function for generating long strings\nvar genstr = function (len, chr) {\n  var result = \u201c\u201d;\n  for (i=0; i<=len; i++) {\n    result = result + chr;\n  }\n  return result;\n}\n\nvar exploit = \u201c[!\u201d + genstr(1000000, \u201c  \u201d) + \u201cA\u201d;\n\n// minimatch exploit.\nconsole.log(\u201cstarting minimatch\u201d);\nminimatch(\u201cfoo\u201d, exploit);\nconsole.log(\u201cfinishing minimatch\u201d);\n```\n\n\n## Recommendation\n\nUpdate to version 3.0.2 or later.\nUpgrade to version 3.0.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16028", "package": "npm:randomatic", "package_type": "npm", "package_usage": "optional", "version": "<3.0.0", "fix_version": "3.0.0", "severity": "LOW", "cvss_score": "2.0", "short_description": "# Cryptographically Weak PRNG in randomatic\nAffected versions of `randomatic` generate random values using a cryptographically weak psuedo random number generator. This may result in predictable values instead of random values as intended.\n\n\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.\nUpgrade to version 3.0.0 or later\n            ", "related_urls": []}
{"id": "CVE-2018-1000620", "package": "npm:cryptiles", "package_type": "npm", "package_usage": "optional", "version": "<4.1.2", "fix_version": "4.1.2", "severity": "CRITICAL", "cvss_score": "9.0", "short_description": "# Insufficient Entropy in cryptiles\nVersions of `cryptiles` prior to 4.1.2 are vulnerable to Insufficient Entropy. The `randomDigits()` method does not provide sufficient entropy and its generates digits that are not evenly distributed.\n\n\n## Recommendation\n\nUpgrade to version 4.1.2. The package is deprecated and has been moved to `@hapi/cryptiles` and it is strongly recommended to use the maintained package.\nUpgrade to version 4.1.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3737", "package": "npm:sshpk", "package_type": "npm", "package_usage": "optional", "version": "<1.13.2", "fix_version": "1.13.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in sshpk\nVersions of `sshpk` before 1.13.2 or 1.14.1 are vulnerable to regular expression denial of service when parsing crafted invalid public keys.\n\n\n## Recommendation\n\nUpdate to version 1.13.2, 1.14.1 or later.\nUpgrade to version 1.13.2 or later\n            ", "related_urls": []}
{"id": "CVE-2017-16119", "package": "npm:fresh", "package_type": "npm", "package_usage": "optional", "version": "<0.5.2", "fix_version": "0.5.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Regular Expression Denial of Service in fresh\nAffected versions of `fresh` are vulnerable to regular expression denial of service when parsing specially crafted user input.\n\n\n## Recommendation\n\nUpdate to version 0.5.2 or later.\nUpgrade to version 0.5.2 or later\n            ", "related_urls": []}
{"id": "CVE-2018-3728", "package": "npm:hoek", "package_type": "npm", "package_usage": "optional", "version": "<4.2.1", "fix_version": "4.2.1", "severity": "MEDIUM", "cvss_score": "5.0", "short_description": "# Prototype Pollution in hoek\nVersions of `hoek` prior to 4.2.1 and 5.0.3 are vulnerable to prototype pollution.\n\nThe `merge` function, and the `applyToDefaults` and `applyToDefaultsWithShallow` functions which leverage `merge` behind the scenes, are vulnerable to a prototype pollution attack when provided an _unvalidated_ payload created from a JSON string containing the `__proto__` property.\n\nThis can be demonstrated like so:\n\n```javascript\nvar Hoek = require('hoek');\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n\nvar a = {};\nconsole.log(\"Before : \" + a.oops);\nHoek.merge({}, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + a.oops);\n```\n\nThis type of attack can be used to overwrite existing properties causing a potential denial of service.\n\n\n## Recommendation\n\nUpdate to version 4.2.1, 5.0.3 or later.\nUpgrade to version 4.2.1 or later\n            ", "related_urls": []}
{"id": "CVE-2022-24785", "package": "npm:moment", "package_type": "npm", "package_usage": "optional", "version": "<2.29.2", "fix_version": "2.29.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Path Traversal: 'dir/../../filename' in moment.locale\n### Impact\nThis vulnerability impacts npm (server) users of moment.js, especially if user provided locale string, eg `fr` is directly used to switch moment locale.\n\n### Patches\nThis problem is patched in 2.29.2, and the patch can be applied to all affected versions (from 1.0.1 up until 2.29.1, inclusive).\n\n### Workarounds\nSanitize user provided locale name before passing it to moment.js.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [moment repo (https://github.com/moment/moment)\n\nUpgrade to version 2.29.2 or later\n            ", "related_urls": []}
{"id": "CVE-2021-43138", "package": "npm:async", "package_type": "npm", "package_usage": "optional", "version": "<2.6.4", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "7.5", "short_description": "# Prototype Pollution in async\nA vulnerability exists in Async through 3.2.1 for 3.x and through 2.6.3 for 2.x (fixed in 3.2.2 and 2.6.4), which could let a malicious user obtain privileges via the `mapValues()` method.\nUpgrade to version 2.6.4 or later\n            ", "related_urls": []}
{"id": "CVE-2022-23395", "package": "npm:jquery.cookie", "package_type": "npm", "package_usage": "required", "version": "1.4.1", "fix_version": null, "severity": "MEDIUM", "cvss_score": "6.1", "short_description": "jQuery Cookie 1.4.1 is affected by prototype pollution, which can lead to DOM cross-site scripting (XSS).", "related_urls": ["https://snyk.io/test/npm/jquery.cookie/1.4.1?tab=issues", "https://security.netapp.com/advisory/ntap-20220325-0008/"]}
{"id": "CVE-2021-23440", "package": "npm:set-value", "package_type": "npm", "package_usage": "optional", "version": "<2.0.1", "fix_version": "2.0.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "This affects the package set-value before <2.0.1, >=3.0.0 <4.0.1. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the path parameter are arrays.", "related_urls": ["https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1584212", "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452", "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/", "https://snyk.io/vuln/SNYK-JS-SETVALUE-1540541", "https://github.com/jonschlinkert/set-value/pull/33", "https://www.oracle.com/security-alerts/cpujan2022.html"]}
{"id": "CVE-2021-27292", "package": "npm:ua-parser-js", "package_type": "npm", "package_usage": "optional", "version": ">=0.7.14-<0.7.24", "fix_version": "0.7.24", "severity": "HIGH", "cvss_score": "7.5", "short_description": "ua-parser-js >= 0.7.14, fixed in 0.7.24, uses a regular expression which is vulnerable to denial of service. If an attacker sends a malicious User-Agent header, ua-parser-js will get stuck processing it for an extended period of time.", "related_urls": ["https://gist.github.com/b-c-ds/6941d80d6b4e694df4bc269493b7be76", "https://github.com/pygments/pygments/commit/2e7e8c4a7b318f4032493773732754e418279a14", "https://github.com/faisalman/ua-parser-js/commit/809439e20e273ce0d25c1d04e111dcf6011eb566"]}
{"id": "CVE-2020-15095", "package": "npm:cli", "package_type": "npm", "package_usage": "optional", "version": "<6.14.6", "fix_version": "6.14.6", "severity": "MEDIUM", "cvss_score": "4.4", "short_description": "Versions of the npm CLI prior to 6.14.6 are vulnerable to an information exposure vulnerability through log files. The CLI supports URLs like \"<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>\". The password value is not redacted and is printed to stdout and also to any generated log files.", "related_urls": ["https://github.com/npm/cli/blob/66aab417f836a901f8afb265251f761bb0422463/CHANGELOG.md#6146-2020-07-07", "https://github.com/npm/cli/security/advisories/GHSA-93f3-23rq-pjfp", "https://github.com/npm/cli/commit/a9857b8f6869451ff058789c4631fadfde5bbcbc", "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00011.html", "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00015.html", "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00023.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4OOYAMJVLLCLXDTHW3V5UXNULZBBK4O6/", "https://security.gentoo.org/glsa/202101-07"]}
{"id": "CVE-2020-15133", "package": "npm:faye-websocket", "package_type": "faye-websocket_project", "package_usage": "optional", "version": "<0.11.0", "fix_version": "0.11.0", "severity": "HIGH", "cvss_score": "8.7", "short_description": "In faye-websocket before version 0.11.0, there is a lack of certification validation in TLS handshakes. The `Faye::WebSocket::Client` class uses the `EM::Connection#start_tls` method in EventMachine to implement the TLS handshake whenever a `wss:` URL is used for the connection. This method does not implement certificate verification by default, meaning that it does not check that the server presents a valid and trusted TLS certificate for the expected hostname. That means that any `wss:` connection made using this library is vulnerable to a man-in-the-middle attack, since it does not confirm the identity of the server it is connected to. For further background information on this issue, please see the referenced GitHub Advisory. Upgrading `faye-websocket` to v0.11.0 is recommended.", "related_urls": ["https://blog.jcoglan.com/2020/07/31/missing-tls-verification-in-faye/", "https://github.com/faye/faye-websocket-ruby/security/advisories/GHSA-2v5c-755p-p4gv"]}
{"id": "CVE-2019-10746", "package": "npm:mixin-deep", "package_type": "npm", "package_usage": "optional", "version": "<1.3.2", "fix_version": "1.3.2", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "mixin-deep is vulnerable to Prototype Pollution in versions before 1.3.2 and version 2.0.0. The function mixin-deep could be tricked into adding or modifying properties of Object.prototype using a constructor payload.", "related_urls": ["https://snyk.io/vuln/SNYK-JS-MIXINDEEP-450212", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BFNIVG2XYFPZJY3DYYBJASZ7ZMKBMIJT/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UXRA365KZCUNXMU3KDH5JN5BEPNIGUKC/", "https://www.oracle.com//security-alerts/cpujul2021.html"]}
{"id": "CVE-2019-10747", "package": "npm:set-value", "package_type": "npm", "package_usage": "optional", "version": "<2.0.1", "fix_version": "2.0.1", "severity": "CRITICAL", "cvss_score": "9.8", "short_description": "set-value is vulnerable to Prototype Pollution in versions lower than 3.0.1. The function mixin-deep could be tricked into adding or modifying properties of Object.prototype using any of the constructor, prototype and _proto_ payloads.", "related_urls": ["https://snyk.io/vuln/SNYK-JS-SETVALUE-450213", "https://lists.apache.org/thread.html/b46f35559c4a97cf74d2dd7fe5a48f8abf2ff37f879083920af9b292@%3Cdev.drat.apache.org%3E", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3EJ36KV6MXQPUYTFCCTDY54E5Y7QP3AV/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/E3HNLQZQINMZK6GYB2UTKK4VU7WBV2OT/"]}
{"id": "CVE-2019-16775", "package": "npm:cli", "package_type": "npm", "package_usage": "optional", "version": "<6.13.3", "fix_version": "6.14.6", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It is possible for packages to create symlinks to files outside of thenode_modules folder through the bin field upon installation. A properly constructed entry in the package.json bin field would allow a package publisher to create a symlink pointing to arbitrary files on a user's system when the package is installed. This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.", "related_urls": ["https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli", "https://github.com/npm/cli/security/advisories/GHSA-m6cx-g6qm-p2cx", "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00027.html", "https://www.oracle.com/security-alerts/cpujan2020.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z36UKPO5F3PQ3Q2POMF5LEKXWAH5RUFP/", "https://access.redhat.com/errata/RHEA-2020:0330", "https://access.redhat.com/errata/RHSA-2020:0573", "https://access.redhat.com/errata/RHSA-2020:0579", "https://access.redhat.com/errata/RHSA-2020:0597", "https://access.redhat.com/errata/RHSA-2020:0602", "https://www.oracle.com/security-alerts/cpuoct2021.html"]}
{"id": "CVE-2019-16776", "package": "npm:cli", "package_type": "npm", "package_usage": "optional", "version": "<6.13.3", "fix_version": "6.14.6", "severity": "HIGH", "cvss_score": "8.1", "short_description": "Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It fails to prevent access to folders outside of the intended node_modules folder through the bin field. A properly constructed entry in the package.json bin field would allow a package publisher to modify and/or gain access to arbitrary files on a user's system when the package is installed. This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.", "related_urls": ["https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli", "https://github.com/npm/cli/security/advisories/GHSA-x8qc-rrcw-4r46", "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00027.html", "https://www.oracle.com/security-alerts/cpujan2020.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z36UKPO5F3PQ3Q2POMF5LEKXWAH5RUFP/", "https://access.redhat.com/errata/RHEA-2020:0330", "https://access.redhat.com/errata/RHSA-2020:0573", "https://access.redhat.com/errata/RHSA-2020:0579", "https://access.redhat.com/errata/RHSA-2020:0597", "https://access.redhat.com/errata/RHSA-2020:0602"]}
{"id": "CVE-2019-16777", "package": "npm:cli", "package_type": "npm", "package_usage": "optional", "version": "<6.13.4", "fix_version": "6.14.6", "severity": "MEDIUM", "cvss_score": "6.5", "short_description": "Versions of the npm CLI prior to 6.13.4 are vulnerable to an Arbitrary File Overwrite. It fails to prevent existing globally-installed binaries to be overwritten by other package installations. For example, if a package was installed globally and created a serve binary, any subsequent installs of packages that also create a serve binary would overwrite the previous serve binary. This behavior is still allowed in local installations and also through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.", "related_urls": ["https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli", "https://github.com/npm/cli/security/advisories/GHSA-4328-8hgf-7wjr", "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00027.html", "https://www.oracle.com/security-alerts/cpujan2020.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z36UKPO5F3PQ3Q2POMF5LEKXWAH5RUFP/", "https://access.redhat.com/errata/RHEA-2020:0330", "https://access.redhat.com/errata/RHSA-2020:0573", "https://access.redhat.com/errata/RHSA-2020:0579", "https://access.redhat.com/errata/RHSA-2020:0597", "https://access.redhat.com/errata/RHSA-2020:0602", "https://security.gentoo.org/glsa/202003-48"]}
{"id": "CVE-2018-3745", "package": "npm:atob", "package_type": "npm", "package_usage": "optional", "version": "<=2.0.3", "fix_version": null, "severity": "CRITICAL", "cvss_score": "9.1", "short_description": "atob 2.0.3 and earlier allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.", "related_urls": ["https://hackerone.com/reports/321686"]}
